from modules import *
df=pd.read_csv("quality.csv")
ge_df=g.from_pandas(df)
print(ge_df)
print()
print("Expect first_name column to have no null values")
print()
print(ge_df.expect_column_values_to_not_be_null('first_name'))
print()
print("Expect 'first_name' column to contain only alphabetic characters (A-Z, case-insensitive)")
print()
print(ge_df.expect_column_values_to_match_regex('first_name', r'^[A-Za-z\s]+$'))
print()
print("Expect first_name column values to have a maximum length of 50 characters")
print(ge_df.expect_column_value_lengths_to_be_between('first_name', min_value=1, max_value=50))
print()
print()
print("Expect last_name column to have no null values")
print()
print(ge_df.expect_column_values_to_not_be_null('last_name'))
print()
print("Expect 'last_name' column to contain only alphabetic characters (A-Z, case-insensitive)")
print()
print(ge_df.expect_column_values_to_match_regex('last_name', r'^[A-Za-z\s]+$'))
print()
print("Expect last_name column values to have a maximum length of 50 characters")
print(ge_df.expect_column_value_lengths_to_be_between('last_name', min_value=1, max_value=50))
print()
print("Ensure the gender field contains only valid values (e.g., Male, Female, Other).")
print()
print(ge_df.expect_column_values_to_be_in_set('gender', ["male","female","other"]))
print()
print("Expect 'address' column to have no null values")
print()
print(ge_df.expect_column_values_to_not_be_null('address'))
print()
print("Expect 'address' column to follow the format street, city, state, country (basic format check)")
print()
print(ge_df.expect_column_values_to_match_regex(
    'address',
    r"^ [\w\s]+, [\w\s]+, [\w\s]+, [\w\s]+$"
))
print()
print("Expect 'address' column values to be between 10 and 100 characters long")
print()
print(ge_df.expect_column_value_lengths_to_be_between('address', min_value=10, max_value=100))
print()
print("Expect 'postal_code' column to have no null values")
print()
print(ge_df.expect_column_values_to_not_be_null('post_code'))
print()
print("Expect 'postal_code' to contain only numeric characters")
print()
print(ge_df.expect_column_values_to_match_regex('post_code', r'^\d+$'))
print()
print("Set a reasonable length for postal codes (e.g., 5 to 10 characters)")
print()
print(ge_df.expect_column_value_lengths_to_be_between('post_code', min_value=5, max_value=10))
print()
print("Expect 'email' column to have no null values")
print(ge_df.expect_column_values_to_not_be_null('email'))
print()
print("Expect 'email' column to contain valid email addresses")
print()
# This regex checks for a general email format
email_regex = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
print(ge_df.expect_column_values_to_match_regex('email', email_regex))
print()
print("Expect 'username' column to contain unique values")
print(ge_df.expect_column_values_to_be_unique('username'))

print("Expect 'username' column to match an alphanumeric pattern (letters and numbers only)")
print(ge_df.expect_column_values_to_match_regex('username', r'^[A-Za-z0-9]+$'))
print()
print()
print("Expect 'date_of_birth' column to follow ISO format (YYYY-MM-DD)")
print()
print(ge_df.expect_column_values_to_match_strftime_format("dob", "%Y-%m-%d"))
print()
print("expect 'age' column in between 18 to 100")
print()
print(ge_df.expect_column_values_to_be_between(
    column="age",
    min_value=18,
    max_value=100,
    result_format="BASIC"
))
print()
print("Expect 'phone_number' column to contain only numeric characters")
print()
print(ge_df.expect_column_values_to_match_regex('phone', r'^\d+$'))

print("Expect 'phone_number' column values to have a length between 10 and 15 digits")
print()
print(ge_df.expect_column_value_lengths_to_be_between('phone', min_value=10, max_value=15))
print()